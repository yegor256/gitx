#!/usr/bin/env bash

# SPDX-FileCopyrightText: Copyright (c) 2025 Yegor Bugayenko
# SPDX-License-Identifier: MIT

set -e -o pipefail

cmd=$1

if [ -z "${cmd}" ]; then
    printf "Usage: gitx command [options]\n"
    printf "Commands:\n"
    printf "\tpull\t'git pull' in all repositories\n"
    printf "\treset\t'git reset --hard' in all repositories\n"
    printf "\tdiff\t'git diff' in all repositories\n"
    printf "\tadd\t'git add' in all repositories\n"
    printf "\tstatus\t'git status' in all repositories\n"
    printf "\tpush\t'git push' in all repositories\n"
    printf "\nIn order to start from a particular repo, use GITX_SKIP environment variable\n"
    exit
fi

declare -a repos=()
while IFS= read -r d; do
    if [ -e "${d}/.git" ]; then
        repos+=( "${d}" )
    fi
    while IFS= read -r s; do
        if [ -e "${d}/.git/modules/${s}" ]; then
            continue
        fi
        if [ -e "${d}/${s}/.git" ]; then
            repos+=( "${d}/${s}" )
        fi
    done < <(find "${d}" -maxdepth 1 -mindepth 1 -type d -exec basename {} \; | sort)
done < <(find . -maxdepth 1 -mindepth 1 \( -type d -o -type l \) -exec basename {} \; | sort)

printf '%d repositories found:\n' "${#repos[@]}"
printf '\t%s\n' "${repos[@]}"
set -e

# Probably, would be better to detect the default branch first,
# instead of using "master":
master=master

function bash_it {
    /bin/bash -x -c "$*"
}

git=git

skip=${GITX_SKIP}
pos=0
for r in "${repos[@]}"; do
    pos=$(( pos + 1 ))
    printf "\n\n\n%s↓↓↓ %s (%d/%d) ↓↓↓%s\n" \
        "$(tput bold)" "${r}" "${pos}" "${#repos[@]}" "$(tput sgr0)"
    if [ -n "${skip}" ] && [ "${skip}" != "${r}" ]; then
        printf "Skipped, because of GITX_SKIP environment variable"
        continue
    fi
    skip=
    opts=("--git-dir=${r}/.git" "--work-tree=${r}")
    if [ "${cmd}" == "pull" ]; then
        bash_it "${git}" "${opts[@]}" checkout "${master}"
        bash_it "${git}" "${opts[@]}" pull --no-edit
        if [ -e "${r}/.git/modules" ]; then
            bash_it cd "${r}" '&&' "${git}" submodule update --remote
        fi
    elif [ "${cmd}" == "reset" ]; then
        bash_it "${git}" "${opts[@]}" reset --hard
        bash_it "${git}" "${opts[@]}" clean -fd
        bash_it "${git}" "${opts[@]}" checkout "${master}"
        if [ -e "${r}/.git/modules" ]; then
            bash_it cd "${r}" '&&' "${git}" submodule deinit -f .
            bash_it cd "${r}" '&&' "${git}" submodule update --init
            while IFS= read -r sm; do
                bash_it cd "${r}/${sm}" '&&' "${git}" reset --hard
                bash_it "${git}" "${opts[@]}" config "submodule.${sm}.ignore" all
            done < <(find "${r}/.git/modules" -maxdepth 1 -mindepth 1 -type d -exec basename {} \;)
        fi
    elif [ "${cmd}" == "diff" ]; then
        bash_it "${git}" "${opts[@]}" --no-pager diff
    elif [ "${cmd}" == "add" ]; then
        bash_it "${git}" "${opts[@]}" add .
    elif [ "${cmd}" == "status" ]; then
        bash_it "${git}" "${opts[@]}" status
    elif [ "${cmd}" == "push" ]; then
        bash_it "${git}" "${opts[@]}" add .
        if ! bash_it "${git}" "${opts[@]}" diff-index --quiet HEAD; then
            bash_it "${git}" "${opts[@]}" status
            bash_it "${git}" "${opts[@]}" commit -S --allow-empty -am "\"$2\""
            bash_it "${git}" "${opts[@]}" --no-pager show
        fi
        if [ -n "$(bash_it "${git}" "${opts[@]}" diff "origin/${master}")" ]; then
            while true; do
                bash_it "${git}" "${opts[@]}" pull --no-edit && break;
            done
            while true; do
                bash_it "${git}" "${opts[@]}" push origin "${master}" && break;
            done
        else
            echo 'Nothing to commit'
        fi
    else
        echo "Unknown command '${cmd}'"
        exit 1
    fi
done
